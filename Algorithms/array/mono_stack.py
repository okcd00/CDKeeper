"""
单调栈是一种数据结构，它可以用于解决一类特殊的问题，
即求解下一个更大元素（Next Greater Element）或下一个更小元素（Next Smaller Element）等类似问题。
单调栈的主要思想是维护一个单调递增或单调递减的栈。

这个模板代码实现的是求解下一个更大元素的问题，
即给定一个数组arr，对于数组中的每个元素arr[i]，找出在数组中arr[i]后面的第一个比它大的数，若没有则为-1。

举个例子，对于数组[2, 1, 5, 3, 4]，单调栈的实现过程如下：

初始化栈为空，当前元素为2，将2入栈。
当前元素为1，1比2小，将1入栈。
当前元素为5，5比1、2都大，将1和2出栈，更新答案数组res[1]=2和res[0]=2，将5入栈。
当前元素为3，3比5小，将3入栈。
当前元素为4，4比3、5都大，将3和5出栈，更新答案数组res[3]=4和res[2]=4，将4入栈。
遍历结束，返回答案数组[2, 2, -1, 4, -1]。
需要注意的是，单调栈适用于求解Next Greater Element、Next Smaller Element等问题，需要根据具体问题进行相应的修改。
"""

def mono_stack(arr):
    n = len(arr)
    res = [-1] * n  # 初始化答案数组为-1
    stack = []  # 初始化单调栈
    for i in range(n):
        while stack and arr[stack[-1]] < arr[i]:
            # 当栈不为空且栈顶元素小于当前元素时，栈顶元素出栈
            res[stack[-1]] = i
            stack.pop()
        stack.append(i)  # 当前元素入栈
    return res
